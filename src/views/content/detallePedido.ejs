
    <!-- Breadcrumb Begin -->
    <div class="breadcrumb-option">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="breadcrumb__links">
                        <a href="./index.html"><i class="fa fa-home"></i> Inicio</a>
                        <span>Contacto</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Breadcrumb End -->

    <!-- Contact Section Begin -->
    <section class="contact spad">
        <div class="container">
            <div class="row">
                <div class="col-lg-6 col-md-6">
                    <div class="contact__content">
                        <script>document.addEventListener('DOMContentLoaded', function() {
                            // Obtener los datos de la facturación almacenados en el almacenamiento local
                            const facturacionSeleccionada = JSON.parse(localStorage.getItem('facturacionSeleccionada'));
                        
                            // Verificar si hay datos de facturación almacenados
                            if (facturacionSeleccionada) {
                                // Llenar los campos con los datos de la facturación
                                const informacionContacto = document.getElementById('informacion-contacto');
                                informacionContacto.innerHTML = `
                                    <h5>Información de Contacto</h5>
                                    <ul>
                                        <li>
                                            <h6><i class="fa fa-map-marker"></i> Cliente</h6>
                                            <p>${facturacionSeleccionada.nombre} ${facturacionSeleccionada.apellido}</p>
                                        </li>
                                        <li>
                                            <h6><i class="fa fa-map-marker"></i> Provincia</h6>
                                            <p>${facturacionSeleccionada.provincia}</p>
                                        </li>
                                        <li>
                                            <h6><i class="fa fa-map-marker"></i> Canton</h6>
                                            <p>${facturacionSeleccionada.canton}</p>
                                        </li>
                                        <li>
                                            <h6><i class="fa fa-map-marker"></i> Distrito</h6>
                                            <p>${facturacionSeleccionada.distrito}</p>
                                        </li>
                                        <li>
                                            <h6><i class="fa fa-map-marker"></i> Dirección</h6>
                                            <p>${facturacionSeleccionada.direccion}</p>
                                        </li>
                                        <li>
                                            <h6><i class="fa fa-phone"></i> Teléfono</h6>
                                            <p><span>${facturacionSeleccionada.telefono}</span></p>
                                        </li>
                                        <li>
                                            <h6><i class="fa fa-headphones"></i> Correo Electrónico</h6>
                                            <p>${facturacionSeleccionada.correo}</p>
                                        </li>
                                    </ul>
                                `;
                            }
                        });
                        </script>
                        <div class="contact__address" id="informacion-contacto">
                          
                        </div>


                        <div class="contact__form">
                            <h5>Enviar mensaje</h5>
                            <form id="contactForm">
                                <input type="text" id="nombre" placeholder="Nombre Completo" required>
                                <input type="email" id="correo" placeholder="Correo" required>
                                <input type="text" id="asunto" placeholder="Asunto" required>
                                <textarea id="mensaje" placeholder="Mensaje" required></textarea>
                                <button type="submit" class="site-btn">Enviar</button>
                                <button type="submit" class="site-btn" onclick="window.location.href = '/repartidor'">Pedido Realizado</button>

                            </form>
                        </div> 
<script>document.addEventListener('DOMContentLoaded', function() {
    const contactForm = document.getElementById('contactForm');

    contactForm.addEventListener('submit', function(event) {
        event.preventDefault();

        const nombre = document.getElementById('nombre').value;
        const correo = document.getElementById('correo').value;
        const asunto = document.getElementById('asunto').value;
        const mensaje = document.getElementById('mensaje').value;

        enviarMensaje(nombre, correo, asunto, mensaje);
    });

    function enviarMensaje(nombre, correo, asunto, mensaje) {
        fetch('/enviarMensaje', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                nombre: nombre,
                correo: correo,
                asunto: asunto,
                mensaje: mensaje
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Respuesta del servidor no válida');
            }
            return response.json();
        })
        .then(data => {
            alert(data.message); // Muestra un mensaje de éxito o error
            contactForm.reset(); // Reinicia el formulario después de enviar el mensaje
        })
        .catch(error => console.error('Error al enviar mensaje:', error));
    }
});
</script>                        
                    </div>
                </div>
                <div class="col-lg-6 col-md-6">
                    <!DOCTYPE html>
                    <html>
                    <head>
                      <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
                      <meta charset="utf-8">
                      <title>Roads API Demo</title>
                      <style>
                        html, body, #map {
                          height: 100%;
                          margin: 0px;
                          padding: 0px;
                        }
                    
                        #bar {
                          width: 240px;
                          background-color: rgba(255, 255, 255, 0.75);
                          margin: 8px;
                          padding: 4px;
                          border-radius: 4px;
                        }
                    
                        #autoc {
                          width: 100%;
                          box-sizing: border-box;
                        }
                      </style>
                    
                      <script src="https://www.gstatic.com/external_hosted/jquery2.min.js"></script>
                      <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBfj7gqJyLE-kwBv39mz6rw0hikOWAieF0&libraries=drawing,places"></script>
                      <script>
                        var map;
                        var drawingManager;
                        var placeIdArray = [];
                        var polylines = [];
                        var snappedCoordinates = [];
                        var userMarker;
                    
                        function initialize() {
                          var mapOptions = {
                            zoom: 17,
                            center: {lat: -33.8667, lng: 151.1955}
                          };
                          map = new google.maps.Map(document.getElementById('map'), mapOptions);
                    
                          // Adds a Places search box. Searching for a place will center the map on that location.
                          map.controls[google.maps.ControlPosition.RIGHT_TOP].push(document.getElementById('bar'));
                          var autocomplete = new google.maps.places.Autocomplete(document.getElementById('autoc'));
                          autocomplete.bindTo('bounds', map);
                          autocomplete.addListener('place_changed', function() {
                            var place = autocomplete.getPlace();
                            if (place.geometry.viewport) {
                              map.fitBounds(place.geometry.viewport);
                            } else {
                              map.setCenter(place.geometry.location);
                              map.setZoom(17);
                            }
                          });
                    
                          // Enables the polyline drawing control. Click on the map to start drawing a polyline. Each click will add a new vertice. Double-click to stop drawing.
                          drawingManager = new google.maps.drawing.DrawingManager({
                            drawingMode: google.maps.drawing.OverlayType.POLYLINE,
                            drawingControl: true,
                            drawingControlOptions: {
                              position: google.maps.ControlPosition.TOP_CENTER,
                              drawingModes: [google.maps.drawing.OverlayType.POLYLINE]
                            },
                            polylineOptions: {
                              strokeColor: '#696969',
                              strokeWeight: 2,
                              strokeOpacity: 0.3
                            }
                          });
                          drawingManager.setMap(map);
                    
                          // Set up event listeners
                          google.maps.event.addListener(drawingManager, 'polylinecomplete', function(poly) {
                            var path = poly.getPath();
                            polylines.push(poly);
                            placeIdArray = [];
                            runSnapToRoad(path);
                          });
                    
                          document.getElementById('start').addEventListener('click', startTrip);
                          document.getElementById('stop').addEventListener('click', stopTrip);
                        }
                    
                        // Snap a user-created polyline to roads and draw the snapped path
                        function runSnapToRoad(path) {
                          var pathValues = [];
                          for (var i = 0; i < path.getLength(); i++) {
                            pathValues.push(path.getAt(i).toUrlValue());
                          }
                    
                          $.get('https://roads.googleapis.com/v1/snapToRoads', {
                            interpolate: true,
                            key: apiKey,
                            path: pathValues.join('|')
                          }, function(data) {
                            processSnapToRoadResponse(data);
                            drawSnappedPolyline();
                          });
                        }
                    
                        // Store snapped polyline returned by the snap-to-road service.
                        function processSnapToRoadResponse(data) {
                          snappedCoordinates = [];
                          placeIdArray = [];
                          for (var i = 0; i < data.snappedPoints.length; i++) {
                            var latlng = new google.maps.LatLng(
                              data.snappedPoints[i].location.latitude,
                              data.snappedPoints[i].location.longitude);
                            snappedCoordinates.push(latlng);
                            placeIdArray.push(data.snappedPoints[i].placeId);
                          }
                        }
                    
                        // Draws the snapped polyline (after processing snap-to-road response).
                        function drawSnappedPolyline() {
                          var snappedPolyline = new google.maps.Polyline({
                            path: snappedCoordinates,
                            strokeColor: '#add8e6',
                            strokeWeight: 4,
                            strokeOpacity: 0.9
                          });
                    
                          snappedPolyline.setMap(map);
                          polylines.push(snappedPolyline);
                        }
                    
                        function startTrip() {
                          // Start updating user's location
                          navigator.geolocation.watchPosition(updateUserLocation, handleLocationError);
                        }
                    
                        function stopTrip() {
                          // Stop updating user's location
                          navigator.geolocation.clearWatch(updateUserLocation);
                        }
                    
                        function updateUserLocation(position) {
                          var userLocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                          };
                    
                          // Update user marker
                          if (!userMarker) {
                            userMarker = new google.maps.Marker({
                              position: userLocation,
                              map: map,
                              title: 'Current Location'
                            });
                          } else {
                            userMarker.setPosition(userLocation);
                          }
                    
                          // Update route from current location to destination
                          updateRoute(userLocation);
                        }
                    
                        function updateRoute(userLocation) {
                          // Retrieve destination from input field or other source
                          var destination = document.getElementById('autoc').value;
                    
                          var request = {
                            origin: userLocation,
                            destination: destination,
                            travelMode: 'DRIVING'
                          };
                    
                          var directionsService = new google.maps.DirectionsService();
                          directionsService.route(request, function(result, status) {
                            if (status == 'OK') {
                              // Clear previous route
                              for (var i = 0; i < polylines.length; ++i) {
                                polylines[i].setMap(null);
                              }
                              polylines = [];
                    
                              // Draw new route
                              var routePolyline = new google.maps.Polyline({
                                path: result.routes[0].overview_path,
                                strokeColor: '#ff0000',
                                strokeWeight: 4
                              });
                              routePolyline.setMap(map);
                              polylines.push(routePolyline);
                            } else {
                              console.error('Directions request failed due to ' + status);
                            }
                          });
                        }
                    
                        function handleLocationError(error) {
                          console.error('Geolocation error occurred: ' + error.message);
                        }
                    
                        $(window).load(initialize);
                      </script>
                    </head>
                    
                    <body>
                    <div id="map"></div>
                    <div id="bar">
                      <p class="auto"><input type="text" id="autoc"/></p>
                      <button id="start">Iniciar Viaje</button>
                      <button id="stop">Detener Viaje</button>
                    </div>
                    </body>
                    </html>
                    
            </div>
        </div>
    </div>
</section>
<!-- Contact Section End -->
